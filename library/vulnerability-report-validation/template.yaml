apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: vulnerabilityreportvalidation
spec:
  crd:
    spec:
      names:
        kind: VulnerabilityReportValidation
      validation:
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerabilityreportvalidation

        # TODO: add support for custom reason message propagating to user
        import future.keywords.if
        import future.keywords.in
        import future.keywords.every

        default require_signature := false # change to true to require notation signature on vulnerability report

        # Get data from Ratify
        remote_data := response {
          images := [img | img = input.review.object.spec.containers[_].image]
          images_init := [img | img = input.review.object.spec.initContainers[_].image]
          images_ephemeral := [img | img = input.review.object.spec.ephemeralContainers[_].image]
          other_images := array.concat(images_init, images_ephemeral)
          all_images := array.concat(other_images, images)
          response := external_data({"provider": "ratify-provider", "keys": all_images})
        }

        violation[{"msg": msg}] {
          general_violation[{"result": msg}]
        }

        # Check if there are any system errors
        general_violation[{"result": result}] {
            err := remote_data.system_error
            err != ""
            result := sprintf("System error calling external data provider: %s", [err])
        }

        # Check if there are errors for any of the images
        general_violation[{"result": result}] {
            count(remote_data.errors) > 0
            result := sprintf("Error validating one or more images: %s", remote_data.errors)
        }

        # Check if the success criteria is true
        general_violation[{"result": result}] {
            subject_validation := remote_data.responses[_]
            subject_result := subject_validation[1]
            vuln_results := [res | subject_result.verifierReports[i].name == "vulnerabilityreport"; res := subject_result.verifierReports[i]]
            count(vuln_results) > 0
            not process_vuln_reports(vuln_results)
            result := sprintf("Subject failed verification: %s", [subject_validation[0]])
        }

        process_vuln_reports(reports) if {
            # At least one report must be valid
            some vuln_report in reports
            vuln_report.isSuccess == true
            valid_signatures(vuln_report)
        }

        valid_signatures(_) := true {
            require_signature == false
        }

        valid_signatures(report) := true {
          require_signature
          count(report.nestedResults) > 0
            some nestedResult in report.nestedResults
            nestedResult.artifactType == "application/vnd.cncf.notary.signature"
            nestedResult.isSuccess
        }